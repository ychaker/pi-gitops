---
# -----------------------------------------------------------------------------
# add-cgroup-iptables.yml
#
# Ensures cgroup kernel parameters are present and idempotent in either
# /boot/firmware/cmdline.txt or /boot/cmdline.txt depending on platform.
# Also ensures iptables is installed.
#
# Usage:
#   - import_tasks: add-cgroup-iptables.yml
#
# After running, the Pi will reboot if changes were made.
# -----------------------------------------------------------------------------

# Try /boot/firmware/cmdline.txt first
- name: Check if /boot/firmware/cmdline.txt exists
  stat:
    path: /boot/firmware/cmdline.txt
  register: firmware_cmdline

# Get contents of /boot/firmware/cmdline.txt if it exists
- name: Read /boot/firmware/cmdline.txt
  when: firmware_cmdline.stat.exists
  slurp:
    src: /boot/firmware/cmdline.txt
  register: firmware_cmdline_contents

# Backup file with a FAT32-safe name, if it exists
- name: Backup /boot/firmware/cmdline.txt
  become: yes
  copy:
    src: /boot/firmware/cmdline.txt
    dest: /boot/firmware/cmdline.txt.bak
    remote_src: yes
  when: firmware_cmdline.stat.exists
  ignore_errors: yes

# Update kernel parameters in /boot/firmware/cmdline.txt
- name: Ensure required cgroup kernel parameters are present in /boot/firmware/cmdline.txt
  become: yes
  lineinfile:
    path: /boot/firmware/cmdline.txt
    regexp: '^(.*)$'
    # Remove any existing cgroup params and append correct ones, all on one line
    line: >-
      {{ (firmware_cmdline_contents.content | b64decode | regex_replace('cgroup_enable=cpuset', '')
          | regex_replace('cgroup_enable=memory', '')
          | regex_replace('cgroup_memory=1', '')
          | trim) +
         ' cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1' | trim }}
    backrefs: yes
  when: firmware_cmdline.stat.exists
  notify: Reboot Pi

# Fallback to /boot/cmdline.txt if /boot/firmware/cmdline.txt does not exist
- name: Check if /boot/cmdline.txt exists
  stat:
    path: /boot/cmdline.txt
  register: boot_cmdline

- name: Read /boot/cmdline.txt
  when: boot_cmdline.stat.exists and not firmware_cmdline.stat.exists
  slurp:
    src: /boot/cmdline.txt
  register: boot_cmdline_contents

- name: Backup /boot/cmdline.txt
  become: yes
  copy:
    src: /boot/cmdline.txt
    dest: /boot/cmdline.txt.bak
    remote_src: yes
  when: boot_cmdline.stat.exists and not firmware_cmdline.stat.exists
  ignore_errors: yes

- name: Ensure required cgroup kernel parameters are present in /boot/cmdline.txt
  become: yes
  lineinfile:
    path: /boot/cmdline.txt
    regexp: '^(.*)$'
    line: >-
      {{ (boot_cmdline_contents.content | b64decode | regex_replace('cgroup_enable=cpuset', '')
          | regex_replace('cgroup_enable=memory', '')
          | regex_replace('cgroup_memory=1', '')
          | trim) +
         ' cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1' | trim }}
    backrefs: yes
  when: boot_cmdline.stat.exists and not firmware_cmdline.stat.exists
  notify: Reboot Pi

# Ensure iptables is installed
- name: Ensure iptables is installed
  become: yes
  apt:
    name: iptables
    state: present
    update_cache: yes
